# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BinDay(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, collection_date: date=None, alert: bool=None, bins: List[str]=None, has_refuse: bool=None, has_recycling: bool=None, has_food_waste: bool=None, has_garden_waste: bool=None, is_cached: bool=None):  # noqa: E501
        """BinDay - a model defined in Swagger

        :param collection_date: The collection_date of this BinDay.  # noqa: E501
        :type collection_date: date
        :param alert: The alert of this BinDay.  # noqa: E501
        :type alert: bool
        :param bins: The bins of this BinDay.  # noqa: E501
        :type bins: List[str]
        :param has_refuse: The has_refuse of this BinDay.  # noqa: E501
        :type has_refuse: bool
        :param has_recycling: The has_recycling of this BinDay.  # noqa: E501
        :type has_recycling: bool
        :param has_food_waste: The has_food_waste of this BinDay.  # noqa: E501
        :type has_food_waste: bool
        :param has_garden_waste: The has_garden_waste of this BinDay.  # noqa: E501
        :type has_garden_waste: bool
        :param is_cached: The is_cached of this BinDay.  # noqa: E501
        :type is_cached: bool
        """
        self.swagger_types = {
            'collection_date': date,
            'alert': bool,
            'bins': List[str],
            'has_refuse': bool,
            'has_recycling': bool,
            'has_food_waste': bool,
            'has_garden_waste': bool,
            'is_cached': bool
        }

        self.attribute_map = {
            'collection_date': 'collectionDate',
            'alert': 'alert',
            'bins': 'bins',
            'has_refuse': 'hasRefuse',
            'has_recycling': 'hasRecycling',
            'has_food_waste': 'hasFoodWaste',
            'has_garden_waste': 'hasGardenWaste',
            'is_cached': 'isCached'
        }
        self._collection_date = collection_date
        self._alert = alert
        self._bins = bins
        self._has_refuse = has_refuse
        self._has_recycling = has_recycling
        self._has_food_waste = has_food_waste
        self._has_garden_waste = has_garden_waste
        self._is_cached = is_cached

    @classmethod
    def from_dict(cls, dikt) -> 'BinDay':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The binDay of this BinDay.  # noqa: E501
        :rtype: BinDay
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_date(self) -> date:
        """Gets the collection_date of this BinDay.

        The date of the bin day  # noqa: E501

        :return: The collection_date of this BinDay.
        :rtype: date
        """
        return self._collection_date

    @collection_date.setter
    def collection_date(self, collection_date: date):
        """Sets the collection_date of this BinDay.

        The date of the bin day  # noqa: E501

        :param collection_date: The collection_date of this BinDay.
        :type collection_date: date
        """

        self._collection_date = collection_date

    @property
    def alert(self) -> bool:
        """Gets the alert of this BinDay.

        Whether or not to alert a user (will be true if the bin day is within 24 hours)  # noqa: E501

        :return: The alert of this BinDay.
        :rtype: bool
        """
        return self._alert

    @alert.setter
    def alert(self, alert: bool):
        """Sets the alert of this BinDay.

        Whether or not to alert a user (will be true if the bin day is within 24 hours)  # noqa: E501

        :param alert: The alert of this BinDay.
        :type alert: bool
        """

        self._alert = alert

    @property
    def bins(self) -> List[str]:
        """Gets the bins of this BinDay.


        :return: The bins of this BinDay.
        :rtype: List[str]
        """
        return self._bins

    @bins.setter
    def bins(self, bins: List[str]):
        """Sets the bins of this BinDay.


        :param bins: The bins of this BinDay.
        :type bins: List[str]
        """

        self._bins = bins

    @property
    def has_refuse(self) -> bool:
        """Gets the has_refuse of this BinDay.

        Whether or not the address has a refuse bin on the delivery day  # noqa: E501

        :return: The has_refuse of this BinDay.
        :rtype: bool
        """
        return self._has_refuse

    @has_refuse.setter
    def has_refuse(self, has_refuse: bool):
        """Sets the has_refuse of this BinDay.

        Whether or not the address has a refuse bin on the delivery day  # noqa: E501

        :param has_refuse: The has_refuse of this BinDay.
        :type has_refuse: bool
        """

        self._has_refuse = has_refuse

    @property
    def has_recycling(self) -> bool:
        """Gets the has_recycling of this BinDay.

        Whether or not the address has a recycling bin on the delivery day  # noqa: E501

        :return: The has_recycling of this BinDay.
        :rtype: bool
        """
        return self._has_recycling

    @has_recycling.setter
    def has_recycling(self, has_recycling: bool):
        """Sets the has_recycling of this BinDay.

        Whether or not the address has a recycling bin on the delivery day  # noqa: E501

        :param has_recycling: The has_recycling of this BinDay.
        :type has_recycling: bool
        """

        self._has_recycling = has_recycling

    @property
    def has_food_waste(self) -> bool:
        """Gets the has_food_waste of this BinDay.

        Whether or not the address has a food waste bin on the delivery day  # noqa: E501

        :return: The has_food_waste of this BinDay.
        :rtype: bool
        """
        return self._has_food_waste

    @has_food_waste.setter
    def has_food_waste(self, has_food_waste: bool):
        """Sets the has_food_waste of this BinDay.

        Whether or not the address has a food waste bin on the delivery day  # noqa: E501

        :param has_food_waste: The has_food_waste of this BinDay.
        :type has_food_waste: bool
        """

        self._has_food_waste = has_food_waste

    @property
    def has_garden_waste(self) -> bool:
        """Gets the has_garden_waste of this BinDay.

        Whether or not the address has a garden waste bin on the delivery day  # noqa: E501

        :return: The has_garden_waste of this BinDay.
        :rtype: bool
        """
        return self._has_garden_waste

    @has_garden_waste.setter
    def has_garden_waste(self, has_garden_waste: bool):
        """Sets the has_garden_waste of this BinDay.

        Whether or not the address has a garden waste bin on the delivery day  # noqa: E501

        :param has_garden_waste: The has_garden_waste of this BinDay.
        :type has_garden_waste: bool
        """

        self._has_garden_waste = has_garden_waste

    @property
    def is_cached(self) -> bool:
        """Gets the is_cached of this BinDay.

        Whether or not the data from sourced from cache or not  # noqa: E501

        :return: The is_cached of this BinDay.
        :rtype: bool
        """
        return self._is_cached

    @is_cached.setter
    def is_cached(self, is_cached: bool):
        """Sets the is_cached of this BinDay.

        Whether or not the data from sourced from cache or not  # noqa: E501

        :param is_cached: The is_cached of this BinDay.
        :type is_cached: bool
        """

        self._is_cached = is_cached
